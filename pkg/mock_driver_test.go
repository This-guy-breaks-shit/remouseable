// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kevinconway/remouseable/pkg (interfaces: Driver)

// Package remouseable is a generated GoMock package.
package remouseable

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Click mocks base method.
func (m *MockDriver) Click() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Click")
	ret0, _ := ret[0].(error)
	return ret0
}

// Click indicates an expected call of Click.
func (mr *MockDriverMockRecorder) Click() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Click", reflect.TypeOf((*MockDriver)(nil).Click))
}

// DragMouse mocks base method.
func (m *MockDriver) DragMouse(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DragMouse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DragMouse indicates an expected call of DragMouse.
func (mr *MockDriverMockRecorder) DragMouse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DragMouse", reflect.TypeOf((*MockDriver)(nil).DragMouse), arg0, arg1)
}

// GetSize mocks base method.
func (m *MockDriver) GetSize() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSize indicates an expected call of GetSize.
func (mr *MockDriverMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockDriver)(nil).GetSize))
}

// MoveMouse mocks base method.
func (m *MockDriver) MoveMouse(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveMouse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveMouse indicates an expected call of MoveMouse.
func (mr *MockDriverMockRecorder) MoveMouse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveMouse", reflect.TypeOf((*MockDriver)(nil).MoveMouse), arg0, arg1)
}

// Unclick mocks base method.
func (m *MockDriver) Unclick() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unclick")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unclick indicates an expected call of Unclick.
func (mr *MockDriverMockRecorder) Unclick() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unclick", reflect.TypeOf((*MockDriver)(nil).Unclick))
}
